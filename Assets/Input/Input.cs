//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Big guy"",
            ""id"": ""c9a8d400-b15a-4313-adee-4a24aa0f8cbf"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""683467c3-abb1-4cc4-a67d-130f4c254a7d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f97ff433-d4b0-44c8-a58c-56c353d0969d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""e8a63758-ef2a-4f40-86ca-a7ecfe4abd02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3bb5c882-3075-4321-a222-3b21017a452e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b7f57d1e-01c5-40ac-b42b-f9f33dbdcc81"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2634307b-d665-4f9b-83d7-0d7db5327cc9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""57fec6f1-a10f-470a-8adc-10dd3914285f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5018bb0b-c681-468f-acd8-4469d5c8ac26"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f76ce213-33f2-4cf6-9628-122e4ae22d9d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea515864-f4b4-42e4-97f3-0d4c04914b6b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5de81190-0d7b-47fb-9ff7-fb6e1495b278"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdc00e2b-c1a5-4b9a-8c16-ff87ff921f86"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Little guy"",
            ""id"": ""d0ababbc-c7a1-48a0-93fa-31a0dfa01f26"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c5f625f3-e45e-4143-945b-e8541993e98f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""38787040-117c-4a1b-a093-1cec604db3ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5aa18620-3506-485a-b26d-e5dcd71c8d41"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e75f7ad2-e36d-4862-9d95-a172540d7ce6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f3b10ea4-da71-4aa4-b427-5b02d6561bab"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d1b803fa-94ac-444c-900d-f2a22c09ba8d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6363ebb9-1863-4287-a465-3fe068eda8a0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ca54ae5e-2015-4b87-a02e-acee447b412f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ff7821a-2c18-47ba-847f-6935ba8243d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07a67958-5a26-4cf5-9114-78c5e2c5bb52"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Big guy
        m_Bigguy = asset.FindActionMap("Big guy", throwIfNotFound: true);
        m_Bigguy_Movement = m_Bigguy.FindAction("Movement", throwIfNotFound: true);
        m_Bigguy_Jump = m_Bigguy.FindAction("Jump", throwIfNotFound: true);
        m_Bigguy_Switch = m_Bigguy.FindAction("Switch", throwIfNotFound: true);
        // Little guy
        m_Littleguy = asset.FindActionMap("Little guy", throwIfNotFound: true);
        m_Littleguy_Movement = m_Littleguy.FindAction("Movement", throwIfNotFound: true);
        m_Littleguy_Jump = m_Littleguy.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Big guy
    private readonly InputActionMap m_Bigguy;
    private IBigguyActions m_BigguyActionsCallbackInterface;
    private readonly InputAction m_Bigguy_Movement;
    private readonly InputAction m_Bigguy_Jump;
    private readonly InputAction m_Bigguy_Switch;
    public struct BigguyActions
    {
        private @Input m_Wrapper;
        public BigguyActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Bigguy_Movement;
        public InputAction @Jump => m_Wrapper.m_Bigguy_Jump;
        public InputAction @Switch => m_Wrapper.m_Bigguy_Switch;
        public InputActionMap Get() { return m_Wrapper.m_Bigguy; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BigguyActions set) { return set.Get(); }
        public void SetCallbacks(IBigguyActions instance)
        {
            if (m_Wrapper.m_BigguyActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_BigguyActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_BigguyActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_BigguyActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_BigguyActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_BigguyActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_BigguyActionsCallbackInterface.OnJump;
                @Switch.started -= m_Wrapper.m_BigguyActionsCallbackInterface.OnSwitch;
                @Switch.performed -= m_Wrapper.m_BigguyActionsCallbackInterface.OnSwitch;
                @Switch.canceled -= m_Wrapper.m_BigguyActionsCallbackInterface.OnSwitch;
            }
            m_Wrapper.m_BigguyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Switch.started += instance.OnSwitch;
                @Switch.performed += instance.OnSwitch;
                @Switch.canceled += instance.OnSwitch;
            }
        }
    }
    public BigguyActions @Bigguy => new BigguyActions(this);

    // Little guy
    private readonly InputActionMap m_Littleguy;
    private ILittleguyActions m_LittleguyActionsCallbackInterface;
    private readonly InputAction m_Littleguy_Movement;
    private readonly InputAction m_Littleguy_Jump;
    public struct LittleguyActions
    {
        private @Input m_Wrapper;
        public LittleguyActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Littleguy_Movement;
        public InputAction @Jump => m_Wrapper.m_Littleguy_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Littleguy; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LittleguyActions set) { return set.Get(); }
        public void SetCallbacks(ILittleguyActions instance)
        {
            if (m_Wrapper.m_LittleguyActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_LittleguyActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_LittleguyActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_LittleguyActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_LittleguyActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LittleguyActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LittleguyActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_LittleguyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public LittleguyActions @Littleguy => new LittleguyActions(this);
    public interface IBigguyActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
    public interface ILittleguyActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
